<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bonsai.System</name>
    </assembly>
    <members>
        <member name="T:Bonsai.IO.ChangeExtension">
            <summary>
            Represents an operator that changes the extension of each path string in
            the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.IO.ChangeExtension.Extension">
            <summary>
            Gets or sets the new extension, with or without a leading period. Specify
            null to remove any extension from the path.
            </summary>
        </member>
        <member name="M:Bonsai.IO.ChangeExtension.Process(System.IObservable{System.String})">
            <summary>
            Changes the extension of each path string in an observable sequence.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.String"/> values for which to change the extension.
            </param>
            <returns>
            A sequence of <see cref="T:System.String"/> values representing the path string with
            the changed extension, for each path in the original sequence.
            </returns>
        </member>
        <member name="T:Bonsai.IO.CsvReader">
            <summary>
            Represents an operator that generates a sequence of values for every line in a text file.
            </summary>
        </member>
        <member name="M:Bonsai.IO.CsvReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.IO.CsvReader"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.IO.CsvReader.FileName">
            <summary>
            Gets or sets the name of the CSV file.
            </summary>
        </member>
        <member name="P:Bonsai.IO.CsvReader.ListSeparator">
            <summary>
            Gets or sets the separator used to delimit elements in variable length rows. This argument is optional.
            </summary>
        </member>
        <member name="P:Bonsai.IO.CsvReader.ScanPattern">
            <summary>
            Gets or sets the optional parse pattern for scanning individual lines.
            In case of variable length rows, the pattern will be applied to each individual element.
            </summary>
        </member>
        <member name="P:Bonsai.IO.CsvReader.SkipRows">
            <summary>
            Gets or sets the number of lines to skip at the start of the file.
            </summary>
        </member>
        <member name="M:Bonsai.IO.CsvReader.BuildCombinator(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.IO.CsvWriter">
            <summary>
            Represents an operator that writes a delimited text representation of each element
            of the sequence to a text file.
            </summary>
        </member>
        <member name="M:Bonsai.IO.CsvWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.IO.CsvWriter"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.IO.CsvWriter.FileName">
            <summary>
            Gets or sets the name of the output CSV file.
            </summary>
        </member>
        <member name="P:Bonsai.IO.CsvWriter.Delimiter">
            <summary>
            Gets or sets the optional delimiter used to separate columns in the output file.
            </summary>
        </member>
        <member name="P:Bonsai.IO.CsvWriter.ListSeparator">
            <summary>
            Gets or sets the separator used to delimit elements in variable length rows. This argument is optional.
            </summary>
        </member>
        <member name="P:Bonsai.IO.CsvWriter.Append">
            <summary>
            Gets or sets a value indicating whether data should be appended to the output file if it already exists.
            </summary>
        </member>
        <member name="P:Bonsai.IO.CsvWriter.Overwrite">
            <summary>
            Gets or sets a value indicating whether the output file should be overwritten if it already exists.
            </summary>
        </member>
        <member name="P:Bonsai.IO.CsvWriter.Suffix">
            <summary>
            Gets or sets the suffix used to generate file names.
            </summary>
        </member>
        <member name="P:Bonsai.IO.CsvWriter.IncludeHeader">
            <summary>
            Gets or sets a value indicating whether to include a text header with column names for multi-attribute values.
            </summary>
        </member>
        <member name="P:Bonsai.IO.CsvWriter.Selector">
            <summary>
            Gets or sets the inner properties that will be selected when writing each element of the sequence.
            </summary>
        </member>
        <member name="P:Bonsai.IO.CsvWriter.CompatibilityMode">
            <summary>
            Gets or sets a value indicating whether the serialized <see cref="T:Bonsai.IO.CsvWriter"/> should use
            white space rather than commas as default delimiter.
            </summary>
        </member>
        <member name="M:Bonsai.IO.CsvWriter.BuildCombinator(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.IO.EnumerateDirectories">
            <summary>
            Represents an operator that generates a sequence of directory names
            matching the specified search pattern.
            </summary>
        </member>
        <member name="P:Bonsai.IO.EnumerateDirectories.Path">
            <summary>
            Gets or sets the relative or absolute path of the directory to search.
            </summary>
        </member>
        <member name="P:Bonsai.IO.EnumerateDirectories.SearchPattern">
            <summary>
            Gets or sets the search string used to match against the names of subdirectories in the path.
            This parameter can contain a combination of valid literal path and wildcard characters
            (see <see cref="M:System.IO.Directory.EnumerateDirectories(System.String,System.String,System.IO.SearchOption)"/>).
            </summary>
        </member>
        <member name="P:Bonsai.IO.EnumerateDirectories.SearchOption">
            <summary>
            Gets or sets a value specifying whether the search should include only the current directory
            or all subdirectories.
            </summary>
        </member>
        <member name="M:Bonsai.IO.EnumerateDirectories.Generate">
            <summary>
            Generates an observable sequence of directory names that match the search pattern in a
            specified path, and optionally searches subdirectories.
            </summary>
            <returns>
            An observable sequence containing the full names (including paths) for the directories in
            <see cref="P:Bonsai.IO.EnumerateDirectories.Path"/> that match the specified <see cref="P:Bonsai.IO.EnumerateDirectories.SearchPattern"/> and <see cref="P:Bonsai.IO.EnumerateDirectories.SearchOption"/>.
            </returns>
        </member>
        <member name="T:Bonsai.IO.EnumerateFiles">
            <summary>
            Represents an operator that generates a sequence of file names matching the specified search pattern.
            </summary>
        </member>
        <member name="P:Bonsai.IO.EnumerateFiles.Path">
            <summary>
            Gets or sets the relative or absolute path of the directory to search.
            </summary>
        </member>
        <member name="P:Bonsai.IO.EnumerateFiles.SearchPattern">
            <summary>
            Gets or sets the search string used to match against the names of files in the path.
            This parameter can contain a combination of valid literal path and wildcard characters
            (see <see cref="M:System.IO.Directory.EnumerateFiles(System.String,System.String,System.IO.SearchOption)"/>).
            </summary>
        </member>
        <member name="P:Bonsai.IO.EnumerateFiles.SearchOption">
            <summary>
            Gets or sets a value specifying whether the search should include only the current directory
            or all subdirectories.
            </summary>
        </member>
        <member name="M:Bonsai.IO.EnumerateFiles.Generate">
            <summary>
            Generates an observable sequence of file names that match the search pattern in a
            specified path, and optionally searches subdirectories.
            </summary>
            <returns>
            An observable sequence containing the full names (including paths) for the files in
            <see cref="P:Bonsai.IO.EnumerateFiles.Path"/> that match the specified <see cref="P:Bonsai.IO.EnumerateFiles.SearchPattern"/> and <see cref="P:Bonsai.IO.EnumerateFiles.SearchOption"/>.
            </returns>
        </member>
        <member name="T:Bonsai.IO.EnumerateFileSystemEntries">
            <summary>
            Represents an operator that generates a sequence of file names and directory names matching
            the specified search pattern.
            </summary>
        </member>
        <member name="P:Bonsai.IO.EnumerateFileSystemEntries.Path">
            <summary>
            Gets or sets the relative or absolute path of the directory to search.
            </summary>
        </member>
        <member name="P:Bonsai.IO.EnumerateFileSystemEntries.SearchPattern">
            <summary>
            Gets or sets the search string used to match against the names of file-system entries in the path.
            This parameter can contain a combination of valid literal path and wildcard characters
            (see <see cref="M:System.IO.Directory.EnumerateFileSystemEntries(System.String,System.String,System.IO.SearchOption)"/>).
            </summary>
        </member>
        <member name="P:Bonsai.IO.EnumerateFileSystemEntries.SearchOption">
            <summary>
            Gets or sets a value specifying whether the search should include only the current directory
            or all subdirectories.
            </summary>
        </member>
        <member name="M:Bonsai.IO.EnumerateFileSystemEntries.Generate">
            <summary>
            Generates an observable sequence of file names and directory names that match the search
            pattern in a specified path, and optionally searches subdirectories.
            </summary>
            <returns>
            An observable sequence containing the full names (including paths) for the file-system entries in
            <see cref="P:Bonsai.IO.EnumerateFileSystemEntries.Path"/> that match the specified <see cref="P:Bonsai.IO.EnumerateFileSystemEntries.SearchPattern"/> and <see cref="P:Bonsai.IO.EnumerateFileSystemEntries.SearchOption"/>.
            </returns>
        </member>
        <member name="T:Bonsai.IO.FileSink">
            <summary>
            Provides a non-generic base class for sinks that write the elements from the input sequence
            into a file.
            </summary>
        </member>
        <member name="M:Bonsai.IO.FileSink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.IO.FileSink`2"/> class.
            </summary>
        </member>
        <member name="P:Bonsai.IO.FileSink.FileName">
            <summary>
            Gets or sets the name of the file on which to write the elements.
            </summary>
        </member>
        <member name="P:Bonsai.IO.FileSink.Suffix">
            <summary>
            Gets or sets the suffix used to generate file names.
            </summary>
        </member>
        <member name="P:Bonsai.IO.FileSink.Buffered">
            <summary>
            Gets or sets a value indicating whether element writing should be buffered. If <see langword="true"/>,
            the write commands will be queued in memory as fast as possible and will be processed
            by the writer in a different thread. Otherwise, writing will be done in the same
            thread in which notifications arrive.
            </summary>
        </member>
        <member name="P:Bonsai.IO.FileSink.Overwrite">
            <summary>
            Gets or sets a value indicating whether to overwrite the output file if it already exists.
            </summary>
        </member>
        <member name="T:Bonsai.IO.FileSink`2">
            <summary>
            Provides a base class for sinks that write the elements from the input sequence
            into a file.
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TWriter">The type of writer that should be used to write the elements.</typeparam>
        </member>
        <member name="M:Bonsai.IO.FileSink`2.CreateWriter(System.String,`0)">
            <summary>
            When overridden in a derived class, creates the writer over the specified
            <paramref name="fileName"/> that will be responsible for handling the input elements.
            </summary>
            <param name="fileName">The name of the file on which the elements should be written.</param>
            <param name="input">The first input element that needs to be pushed into the file.</param>
            <returns>The writer that will be used to push elements into the file.</returns>
        </member>
        <member name="M:Bonsai.IO.FileSink`2.Write(`1,`0)">
            <summary>
            When overridden in a derived class, writes a new element into the specified writer.
            </summary>
            <param name="writer">The writer that is used to push elements into the file.</param>
            <param name="input">The input element that should be pushed into the file.</param>
        </member>
        <member name="M:Bonsai.IO.FileSink`2.Process``1(System.IObservable{``0},System.Func{``0,`0})">
            <summary>
            Writes all elements of an observable sequence into the specified file.
            </summary>
            <param name="source">The source sequence for which to write elements.</param>
            <param name="selector">
            The transform function used to convert each element of the sequence into the type
            of inputs accepted by the file writer.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/> sequence
            but where there is an additional side effect of writing the elements to a file.
            </returns>
        </member>
        <member name="M:Bonsai.IO.FileSink`2.Process(System.IObservable{`0})">
            <summary>
            Writes all elements of an observable sequence into the specified file.
            </summary>
            <param name="source">The source sequence for which to write elements.</param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/> sequence
            but where there is an additional side effect of writing the elements to a file.
            </returns>
        </member>
        <member name="T:Bonsai.IO.GetDirectories">
            <summary>
            Represents an operator that generates a sequence containing an array with the names of
            the subdirectories matching the specified search pattern.
            </summary>
        </member>
        <member name="P:Bonsai.IO.GetDirectories.Path">
            <summary>
            Gets or sets the relative or absolute path of the directory to search.
            </summary>
        </member>
        <member name="P:Bonsai.IO.GetDirectories.SearchPattern">
            <summary>
            Gets or sets the search string used to match against the names of subdirectories in the path.
            This parameter can contain a combination of valid literal path and wildcard characters
            (see <see cref="M:System.IO.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption)"/>).
            </summary>
        </member>
        <member name="P:Bonsai.IO.GetDirectories.SearchOption">
            <summary>
            Gets or sets a value specifying whether the search should include only the current directory
            or all subdirectories.
            </summary>
        </member>
        <member name="M:Bonsai.IO.GetDirectories.Generate">
            <summary>
            Generates an observable sequence containing an array of directory names that match the search
            pattern in a specified path, and optionally searches subdirectories.
            </summary>
            <returns>
            An observable sequence containing an array with the full names (including paths) for the directories in
            <see cref="P:Bonsai.IO.GetDirectories.Path"/> that match the specified <see cref="P:Bonsai.IO.GetDirectories.SearchPattern"/> and <see cref="P:Bonsai.IO.GetDirectories.SearchOption"/>.
            </returns>
        </member>
        <member name="T:Bonsai.IO.GetDirectoryName">
            <summary>
            Represents an operator that returns the directory information for each path string in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.IO.GetDirectoryName.Process(System.IObservable{System.String})">
            <summary>
            Returns the directory information for each path string in an observable sequence.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.String"/> values representing the path to a file or directory.
            </param>
            <returns>
            A sequence of <see cref="T:System.String"/> values representing directory information for each
            path in the original sequence, or <see langword="null"/>
            (see <see cref="M:System.IO.Path.GetDirectoryName(System.String)"/>).
            </returns>
        </member>
        <member name="T:Bonsai.IO.GetExtension">
            <summary>
            Represents an operator that returns the extension of each path string in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.IO.GetExtension.Process(System.IObservable{System.String})">
            <summary>
            Returns the extension of each path string in an observable sequence.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.String"/> values from which to get the extension.
            </param>
            <returns>
            A sequence of <see cref="T:System.String"/> values representing the extension of each
            path in the original sequence, or <see langword="null"/>
            (see <see cref="M:System.IO.Path.GetExtension(System.String)"/>).
            </returns>
        </member>
        <member name="T:Bonsai.IO.GetFileName">
            <summary>
            Represents an operator that returns the file name and extension of each path string in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.IO.GetFileName.Process(System.IObservable{System.String})">
            <summary>
            Returns the file name and extension of each path string in an observable sequence.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.String"/> values from which to obtain the file name and extension.
            </param>
            <returns>
            A sequence of <see cref="T:System.String"/> values containing the characters after the
            last directory character of each path in the original sequence
            (see <see cref="M:System.IO.Path.GetExtension(System.String)"/>).
            </returns>
        </member>
        <member name="T:Bonsai.IO.GetFileNameWithoutExtension">
            <summary>
            Represents an operator that returns the file name without the extension for each
            path string in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.IO.GetFileNameWithoutExtension.Process(System.IObservable{System.String})">
            <summary>
            Returns the file name without the extension for each path string in an observable sequence.
            </summary>
            <param name="source">A sequence of path <see cref="T:System.String"/> values.</param>
            <returns>
            A sequence of <see cref="T:System.String"/> values returned by <see cref="M:System.IO.Path.GetFileName(System.String)"/>,
            minus the last period (.) and all characters following it (see
            <see cref="M:System.IO.Path.GetFileNameWithoutExtension(System.String)"/>).
            </returns>
        </member>
        <member name="T:Bonsai.IO.GetFiles">
            <summary>
            Represents an operator that generates a sequence containing an array with the names of
            the files matching the specified search pattern.
            </summary>
        </member>
        <member name="P:Bonsai.IO.GetFiles.Path">
            <summary>
            Gets or sets the relative or absolute path of the directory to search.
            </summary>
        </member>
        <member name="P:Bonsai.IO.GetFiles.SearchPattern">
            <summary>
            Gets or sets the search string used to match against the names of files in the path.
            This parameter can contain a combination of valid literal path and wildcard characters
            (see <see cref="M:System.IO.Directory.GetFiles(System.String,System.String,System.IO.SearchOption)"/>).
            </summary>
        </member>
        <member name="P:Bonsai.IO.GetFiles.SearchOption">
            <summary>
            Gets or sets a value specifying whether the search should include only the current directory
            or all subdirectories.
            </summary>
        </member>
        <member name="M:Bonsai.IO.GetFiles.Generate">
            <summary>
            Generates an observable sequence containing an array of file names that match the search
            pattern in a specified path, and optionally searches subdirectories.
            </summary>
            <returns>
            An observable sequence containing an array with the full names (including paths) for the files in
            <see cref="P:Bonsai.IO.GetFiles.Path"/> that match the specified <see cref="P:Bonsai.IO.GetFiles.SearchPattern"/> and <see cref="P:Bonsai.IO.GetFiles.SearchOption"/>.
            </returns>
        </member>
        <member name="T:Bonsai.IO.GetFileSystemEntries">
            <summary>
            Represents an operator that generates a sequence containing an array with the names of
            the files and directories matching the specified search pattern.
            </summary>
        </member>
        <member name="P:Bonsai.IO.GetFileSystemEntries.Path">
            <summary>
            Gets or sets the relative or absolute path of the directory to search.
            </summary>
        </member>
        <member name="P:Bonsai.IO.GetFileSystemEntries.SearchPattern">
            <summary>
            Gets or sets the search string used to match against the names of file-system entries in the path.
            This parameter can contain a combination of valid literal path and wildcard characters
            (see <see cref="M:System.IO.Directory.GetFileSystemEntries(System.String,System.String,System.IO.SearchOption)"/>).
            </summary>
        </member>
        <member name="P:Bonsai.IO.GetFileSystemEntries.SearchOption">
            <summary>
            Gets or sets a value specifying whether the search should include only the current directory
            or all subdirectories.
            </summary>
        </member>
        <member name="M:Bonsai.IO.GetFileSystemEntries.Generate">
            <summary>
            Generates an observable sequence containing an array of file names and directory names that
            match the search pattern in a specified path, and optionally searches subdirectories.
            </summary>
            <returns>
            An observable sequence containing an array with the full names (including paths) for the file-system entries in
            <see cref="P:Bonsai.IO.GetFileSystemEntries.Path"/> that match the specified <see cref="P:Bonsai.IO.GetFileSystemEntries.SearchPattern"/> and <see cref="P:Bonsai.IO.GetFileSystemEntries.SearchOption"/>.
            </returns>
        </member>
        <member name="T:Bonsai.IO.GetFullPath">
            <summary>
            Represents an operator that returns the absolute path for each path string in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.IO.GetFullPath.Process(System.IObservable{System.String})">
            <summary>
            Represents an operator that returns the absolute path for each path string in an observable sequence.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.String"/> values for which to obtain absolute path information.
            </param>
            <returns>
            A sequence of <see cref="T:System.String"/> values representing the fully qualified location for each
            path in the original sequence (see <see cref="M:System.IO.Path.GetFullPath(System.String)"/>).
            </returns>
        </member>
        <member name="T:Bonsai.IO.GetPathRoot">
            <summary>
            Represents an operator that returns the root directory information of each path string in the sequence.
            </summary>
        </member>
        <member name="M:Bonsai.IO.GetPathRoot.Process(System.IObservable{System.String})">
            <summary>
            Returns the root directory information of each path string in an observable sequence.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.String"/> values for which to obtain root directory information.
            </param>
            <returns>
            A sequence of <see cref="T:System.String"/> values representing the root directory for each
            path in the original sequence (see <see cref="M:System.IO.Path.GetPathRoot(System.String)"/>).
            </returns>
        </member>
        <member name="T:Bonsai.IO.PathHelper">
            <summary>
            Provides a set of static methods for creating and manipulating directory
            and file names.
            </summary>
        </member>
        <member name="M:Bonsai.IO.PathHelper.EnsureDirectory(System.String)">
            <summary>
            Checks that all folders along the specified path exist and attempts to
            create any missing ones.
            </summary>
            <param name="path">The path to check for missing folders.</param>
        </member>
        <member name="M:Bonsai.IO.PathHelper.AppendSuffix(System.String,Bonsai.IO.PathSuffix)">
            <summary>
            Appends the specified well known suffix type to a file name without
            modifying the extension.
            </summary>
            <param name="path">The file name on which to append the suffix.</param>
            <param name="suffixType">The suffix type to append.</param>
            <returns>
            The new file name where <paramref name="path"/> has been modified
            to end with the specified <paramref name="suffixType"/> but without
            modifying the file extension.
            </returns>
        </member>
        <member name="M:Bonsai.IO.PathHelper.AppendSuffix(System.String,System.String)">
            <summary>
            Appends the specified suffix to a file name without modifying
            its original extension.
            </summary>
            <param name="path">The file name on which to append the suffix.</param>
            <param name="suffix">The suffix to append.</param>
            <returns>
            The new file name where <paramref name="path"/> has been modified
            to end with <paramref name="suffix"/> but without modifying the
            file extension.
            </returns>
        </member>
        <member name="M:Bonsai.IO.PathHelper.AppendTimestamp(System.String,System.DateTimeOffset)">
            <summary>
            Appends a timestamp suffix to a file name without modifying
            its original extension.
            </summary>
            <param name="path">The file name on which to append the suffix.</param>
            <param name="timestamp">The timestamp to use for generating the suffix.</param>
            <returns>
            The new file name where <paramref name="path"/> has been modified
            to end with the round-trip representation of the specified
            <paramref name="timestamp"/> but without modifying the file extension.
            </returns>
        </member>
        <member name="M:Bonsai.IO.PathHelper.AppendFileCount(System.String)">
            <summary>
            Appends a file count suffix to a file name without modifying
            its original extension.
            </summary>
            <param name="path">The file name on which to append the suffix.</param>
            <returns>
            The new file name where <paramref name="path"/> has been modified
            to end with the number of files starting with the specified file name
            in the containing folder but without modifying the file extension.
            </returns>
        </member>
        <member name="T:Bonsai.IO.PathSuffix">
            <summary>
            Specifies the known path suffixes that can be appended to a path.
            </summary>
        </member>
        <member name="F:Bonsai.IO.PathSuffix.None">
            <summary>
            Specifies that no suffix should be appended to the path.
            </summary>
        </member>
        <member name="F:Bonsai.IO.PathSuffix.FileCount">
            <summary>
            Specifies that the suffix should be the number of files in the same
            directory that start with the same file name.
            </summary>
        </member>
        <member name="F:Bonsai.IO.PathSuffix.Timestamp">
            <summary>
            Specifies that the suffix should be the current timestamp as generated
            by a high resolution system timer, if available.
            </summary>
        </member>
        <member name="T:Bonsai.IO.BaudRateConverter">
            <summary>
            Provides a type converter to convert serial baud rates to and from other representations.
            </summary>
        </member>
        <member name="M:Bonsai.IO.BaudRateConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.IO.BaudRateConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of standard serial baud rates.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/> containing a set of standard
            serial baud rates.
            </returns>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.IO.CreateSerialPort">
            <summary>
            Represents an operator that creates and configures a connection to a system serial port.
            </summary>
        </member>
        <member name="P:Bonsai.IO.CreateSerialPort.Name">
            <summary>
            Gets or sets the optional alias for the serial port connection.
            </summary>
        </member>
        <member name="P:Bonsai.IO.CreateSerialPort.PortName">
            <summary>
            Gets or sets the name of the serial port.
            </summary>
        </member>
        <member name="P:Bonsai.IO.CreateSerialPort.BaudRate">
            <summary>
            Gets or sets the serial baud rate.
            </summary>
        </member>
        <member name="P:Bonsai.IO.CreateSerialPort.Encoding">
            <summary>
            Gets or sets the byte encoding used for pre- and post-transmission conversion of text.
            </summary>
        </member>
        <member name="P:Bonsai.IO.CreateSerialPort.Parity">
            <summary>
            Gets or sets the parity bit for the <see cref="T:System.IO.Ports.SerialPort"/> object.
            </summary>
        </member>
        <member name="P:Bonsai.IO.CreateSerialPort.ParityReplace">
            <summary>
            Gets or sets the byte that replaces invalid bytes in the data stream when a parity error occurs.
            </summary>
        </member>
        <member name="P:Bonsai.IO.CreateSerialPort.DataBits">
            <summary>
            Gets or sets the number of data bits per byte.
            </summary>
        </member>
        <member name="P:Bonsai.IO.CreateSerialPort.StopBits">
            <summary>
            Gets or sets the number of stop bits per byte.
            </summary>
        </member>
        <member name="P:Bonsai.IO.CreateSerialPort.Handshake">
            <summary>
            Gets or sets the handshaking protocol for serial port transmission of data.
            </summary>
        </member>
        <member name="P:Bonsai.IO.CreateSerialPort.DiscardNull">
            <summary>
            Gets or sets a value indicating whether null bytes are ignored when transmitted
            between the port and the receive buffer.
            </summary>
        </member>
        <member name="P:Bonsai.IO.CreateSerialPort.DtrEnable">
            <summary>
            Gets or sets a value indicating whether the Data Terminal Ready (DTR) signal should
            be enabled during serial communication.
            </summary>
        </member>
        <member name="P:Bonsai.IO.CreateSerialPort.RtsEnable">
            <summary>
            Gets or sets a value indicating whether the Request to Send (RTS) signal should be
            enabled during serial communication.
            </summary>
        </member>
        <member name="P:Bonsai.IO.CreateSerialPort.ReadBufferSize">
            <summary>
            Gets or sets the size of the read buffer, in bytes. This is the maximum number of
            read bytes which can be buffered.
            </summary>
        </member>
        <member name="P:Bonsai.IO.CreateSerialPort.WriteBufferSize">
            <summary>
            Gets or sets the size of the write buffer, in bytes. This is the maximum number of
            bytes which can be queued for write.
            </summary>
        </member>
        <member name="P:Bonsai.IO.CreateSerialPort.ReceivedBytesThreshold">
            <summary>
            Gets or sets the number of bytes received into the internal input buffer before
            the read event is fired.
            </summary>
        </member>
        <member name="M:Bonsai.IO.CreateSerialPort.Generate">
            <summary>
            Generates an observable sequence that contains the serial port connection object.
            </summary>
            <returns>
            A sequence containing a single instance of the <see cref="T:System.IO.Ports.SerialPort"/> class
            representing the serial connection.
            </returns>
        </member>
        <member name="T:Bonsai.IO.SerialPortConfiguration">
            <summary>
            Represents the set of configuration parameters used to create a new serial port connection.
            </summary>
        </member>
        <member name="P:Bonsai.IO.SerialPortConfiguration.PortName">
            <summary>
            Gets or sets the name of the serial port.
            </summary>
        </member>
        <member name="P:Bonsai.IO.SerialPortConfiguration.BaudRate">
            <summary>
            Gets or sets the serial baud rate.
            </summary>
        </member>
        <member name="P:Bonsai.IO.SerialPortConfiguration.Encoding">
            <summary>
            Gets or sets the byte encoding used for pre- and post-transmission conversion of text.
            </summary>
        </member>
        <member name="P:Bonsai.IO.SerialPortConfiguration.Parity">
            <summary>
            Gets or sets the parity bit for the <see cref="T:System.IO.Ports.SerialPort"/> object.
            </summary>
        </member>
        <member name="P:Bonsai.IO.SerialPortConfiguration.ParityReplace">
            <summary>
            Gets or sets the byte that replaces invalid bytes in the data stream when a parity error occurs.
            </summary>
        </member>
        <member name="P:Bonsai.IO.SerialPortConfiguration.DataBits">
            <summary>
            Gets or sets the number of data bits per byte.
            </summary>
        </member>
        <member name="P:Bonsai.IO.SerialPortConfiguration.StopBits">
            <summary>
            Gets or sets the number of stop bits per byte.
            </summary>
        </member>
        <member name="P:Bonsai.IO.SerialPortConfiguration.Handshake">
            <summary>
            Gets or sets the handshaking protocol for serial port transmission of data.
            </summary>
        </member>
        <member name="P:Bonsai.IO.SerialPortConfiguration.DiscardNull">
            <summary>
            Gets or sets a value indicating whether null bytes are ignored when transmitted
            between the port and the receive buffer.
            </summary>
        </member>
        <member name="P:Bonsai.IO.SerialPortConfiguration.DtrEnable">
            <summary>
            Gets or sets a value indicating whether the Data Terminal Ready (DTR) signal should
            be enabled during serial communication.
            </summary>
        </member>
        <member name="P:Bonsai.IO.SerialPortConfiguration.RtsEnable">
            <summary>
            Gets or sets a value indicating whether the Request to Send (RTS) signal should be
            enabled during serial communication.
            </summary>
        </member>
        <member name="P:Bonsai.IO.SerialPortConfiguration.ReadBufferSize">
            <summary>
            Gets or sets the size of the read buffer, in bytes. This is the maximum number of
            read bytes which can be buffered.
            </summary>
        </member>
        <member name="P:Bonsai.IO.SerialPortConfiguration.WriteBufferSize">
            <summary>
            Gets or sets the size of the write buffer, in bytes. This is the maximum number of
            bytes which can be queued for write.
            </summary>
        </member>
        <member name="P:Bonsai.IO.SerialPortConfiguration.ReceivedBytesThreshold">
            <summary>
            Gets or sets the number of bytes received into the internal input buffer before
            the read event is fired.
            </summary>
        </member>
        <member name="T:Bonsai.IO.SerialPortConfigurationCollection">
            <summary>
            Represents a collection of serial port configuration objects.
            </summary>
        </member>
        <member name="M:Bonsai.IO.SerialPortConfigurationCollection.GetKeyForItem(Bonsai.IO.SerialPortConfiguration)">
            <summary>
            Extracts the key from the specified <see cref="T:Bonsai.IO.SerialPortConfiguration"/> object.
            </summary>
            <param name="item">The <see cref="T:Bonsai.IO.SerialPortConfiguration"/> object from which to extract the key.</param>
            <returns>
            The key for the specified <see cref="T:Bonsai.IO.SerialPortConfiguration"/> object. Currently,
            this is the name of the serial port associated with the configuration object.
            </returns>
        </member>
        <member name="T:Bonsai.IO.SerialPortNameConverter">
            <summary>
            Provides a type converter to convert serial port names to and from other representations.
            </summary>
        </member>
        <member name="M:Bonsai.IO.SerialPortNameConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.IO.SerialPortNameConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of available serial port names for the current computer.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/> containing the set of
            available serial port names for the current computer.
            </returns>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.IO.SerialStringRead">
            <summary>
            Represents an operator that reads lines of characters asynchronously from a serial port.
            </summary>
        </member>
        <member name="P:Bonsai.IO.SerialStringRead.PortName">
            <summary>
            Gets or sets the name of the serial port.
            </summary>
        </member>
        <member name="P:Bonsai.IO.SerialStringRead.NewLine">
            <summary>
            Gets or sets the new line separator used to delimit reads from the serial port.
            </summary>
        </member>
        <member name="M:Bonsai.IO.SerialStringRead.Generate">
            <summary>
            Reads lines of characters asynchronously from the serial port.
            </summary>
            <returns>
            A sequence of <see cref="T:System.String"/> values representing each of the lines
            read from the serial port.
            </returns>
        </member>
        <member name="T:Bonsai.IO.SerialStringWrite">
            <summary>
            Represents an operator that writes the text representation of each element of the
            sequence to a serial port.
            </summary>
        </member>
        <member name="P:Bonsai.IO.SerialStringWrite.PortName">
            <summary>
            Gets or sets the name of the serial port.
            </summary>
        </member>
        <member name="P:Bonsai.IO.SerialStringWrite.NewLine">
            <summary>
            Gets or sets the separator used to terminate lines sent to the serial port.
            </summary>
        </member>
        <member name="M:Bonsai.IO.SerialStringWrite.Process``1(System.IObservable{``0})">
            <summary>
            Writes the text representation of each element of an observable sequence to a serial port.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the elements to write to the serial port.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/> sequence
            but where there is an additional side effect of writing the elements to
            the serial port.
            </returns>
        </member>
        <member name="T:Bonsai.IO.ReadLine">
            <summary>
            Represents an operator that reads lines of characters asynchronously from the input stream.
            </summary>
        </member>
        <member name="M:Bonsai.IO.ReadLine.Generate">
            <summary>
            Reads lines of characters asynchronously from the standard input stream.
            </summary>
            <returns>
            A sequence of <see cref="T:System.String"/> values representing each of the lines
            read from the standard input stream, or <see langword="null"/> if all
            of the characters have been read.
            </returns>
        </member>
        <member name="M:Bonsai.IO.ReadLine.Generate(System.IObservable{System.IO.TextReader})">
            <summary>
            Reads lines of characters asynchronously from a <see cref="T:System.IO.TextReader"/> object.
            </summary>
            <param name="source">
            A sequence of <see cref="T:System.IO.TextReader"/> objects from which to read lines.
            </param>
            <returns>
            A sequence of <see cref="T:System.String"/> values representing the lines read from each
            of the <see cref="T:System.IO.TextReader"/> objects in the original sequence, or
            <see langword="null"/> if all of the characters have been read.
            </returns>
        </member>
        <member name="T:Bonsai.IO.StartProcess">
            <summary>
            Represents an operator that starts a new system process with the specified file name and
            command-line arguments.
            </summary>
        </member>
        <member name="P:Bonsai.IO.StartProcess.FileName">
            <summary>
            Gets or sets the name of the application or document to start.
            </summary>
        </member>
        <member name="P:Bonsai.IO.StartProcess.Arguments">
            <summary>
            Gets or sets the set of command-line arguments to use when starting the application.
            </summary>
        </member>
        <member name="M:Bonsai.IO.StartProcess.Generate``1(System.IObservable{``0})">
            <summary>
            Starts a new system process with the specified file name and command-line arguments
            for each element of an observable sequence, and surfaces all the exit codes as the
            processes terminate.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            An observable sequence used to start the system processes. For each element produced by
            this sequence, a new system process will be started.
            </param>
            <returns>
            A sequence containing all the exit codes from the processes started by the
            <paramref name="source"/> sequence. A new exit code is produced every time one
            of the processes terminates.
            </returns>
        </member>
        <member name="M:Bonsai.IO.StartProcess.Generate">
            <summary>
            Starts a new system process with the specified file name and command-line arguments
            and surfaces the exit code when the process terminates through an observable sequence.
            </summary>
            <returns>
            A sequence containing the exit code that the process specified when it terminated.
            </returns>
        </member>
        <member name="T:Bonsai.IO.StreamSink">
            <summary>
            Provides a non-generic base class for sinks that write the elements from the input sequence
            into a named stream (e.g. a named pipe).
            </summary>
        </member>
        <member name="P:Bonsai.IO.StreamSink.Path">
            <summary>
            Gets or sets the identifier of the named stream on which to write the elements.
            </summary>
            <remarks>
            If the identifier uses the named pipe prefix <c>\\.\pipe\</c>, a corresponding
            <see cref="T:System.IO.Pipes.NamedPipeServerStream"/> object is created; otherwise a regular
            <see cref="T:System.IO.FileStream"/> is used.
            </remarks>
        </member>
        <member name="P:Bonsai.IO.StreamSink.Suffix">
            <summary>
            Gets or sets the suffix that should be applied to the path before creating the writer.
            </summary>
        </member>
        <member name="P:Bonsai.IO.StreamSink.Overwrite">
            <summary>
            Gets or sets a value indicating whether to overwrite the output path if it already exists.
            </summary>
        </member>
        <member name="T:Bonsai.IO.StreamSink`2">
            <summary>
            Provides a base class for sinks that write the elements from the input sequence
            into a named stream (e.g. a named pipe).
            </summary>
            <typeparam name="TSource">The type of the elements in the source sequence.</typeparam>
            <typeparam name="TWriter">The type of stream writer that should be used to write the elements.</typeparam>
        </member>
        <member name="M:Bonsai.IO.StreamSink`2.CreateWriter(System.IO.Stream)">
            <summary>
            When overridden in a derived class, creates the object that will be responsible
            for writing the input elements to the specified <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The stream on which the elements should be written.</param>
            <returns>The object that will be used to write elements into the stream.</returns>
        </member>
        <member name="M:Bonsai.IO.StreamSink`2.Write(`1,`0)">
            <summary>
            When overridden in a derived class, writes a new element using the specified writer.
            </summary>
            <param name="writer">The writer used to push elements into the stream.</param>
            <param name="input">The input element that should be pushed into the stream.</param>
        </member>
        <member name="M:Bonsai.IO.StreamSink`2.Process``1(System.IObservable{``0},System.Func{``0,`0})">
            <summary>
            Writes all elements of an observable sequence to the specified stream
            using the specified selector function.
            </summary>
            <param name="source">The sequence of elements to write.</param>
            <param name="selector">
            The transform function used to convert each element of the sequence into the type
            of inputs accepted by the stream writer.
            </param>
            <returns>
            An observable sequence that is identical to the source sequence but where
            there is an additional side effect of writing the elements to a stream.
            </returns>
        </member>
        <member name="M:Bonsai.IO.StreamSink`2.Process(System.IObservable{`0})">
            <summary>
            Writes all elements of an observable sequence to the specified stream.
            </summary>
            <param name="source">The sequence of elements to write.</param>
            <returns>
            An observable sequence that is identical to the source sequence but where
            there is an additional side effect of writing the elements to a stream.
            </returns>
        </member>
        <member name="T:Bonsai.IO.TextWriter">
            <summary>
            Represents an operator that writes the text representation of each element of the sequence to a file.
            </summary>
        </member>
        <member name="P:Bonsai.IO.TextWriter.Append">
            <summary>
            Gets or sets a value indicating whether to append or overwrite the specified file.
            </summary>
        </member>
        <member name="M:Bonsai.IO.TextWriter.CreateWriter(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.IO.TextWriter.Write(System.IO.StreamWriter,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.IO.WriteLine">
            <summary>
            Represents an operator that writes the text representation of each element of the sequence to the
            output stream, followed by the current line terminator.
            </summary>
        </member>
        <member name="M:Bonsai.IO.WriteLine.Process``1(System.IObservable{``0})">
            <summary>
            Writes the text representation of each element of an observable sequence to the standard
            output stream, followed by a line terminator.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the elements to write to the standard output stream.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/> sequence but
            where there is an additional side effect of writing the elements to the standard
            output stream.
            </returns>
        </member>
        <member name="M:Bonsai.IO.WriteLine.Process``1(System.IObservable{``0},System.IObservable{System.IO.TextWriter})">
            <summary>
            Writes the text representation of each element of an observable sequence to all the
            specified output streams, followed by a line terminator.
            </summary>
            <typeparam name="TSource">
            The type of the elements in the <paramref name="source"/> sequence.
            </typeparam>
            <param name="source">
            The sequence containing the elements to write to the active output streams.
            </param>
            <param name="writer">
            A sequence of <see cref="T:System.IO.TextWriter"/> objects on which to write the text
            representation of the elements of the <paramref name="source"/> sequence.
            </param>
            <returns>
            An observable sequence that is identical to the <paramref name="source"/> sequence
            but where there is an additional side effect of writing the elements to all active
            output streams.
            </returns>
        </member>
        <member name="T:Bonsai.Resources.LoadResources">
            <summary>
            Represents an operator that loads a collection of resources into the
            resource manager.
            </summary>
        </member>
        <member name="M:Bonsai.Resources.LoadResources.Process(System.IObservable{Bonsai.Resources.ResourceConfigurationCollection})">
            <summary>
            Loads a collection of resources into the resource manager.
            </summary>
            <param name="source">
            The sequence containing the collection of resources to be loaded in the
            resource manager.
            </param>
            <returns>
            A sequence of <see cref="T:System.IDisposable"/> objects which can be used to unload
            the loaded resources.
            </returns>
        </member>
        <member name="T:Bonsai.Resources.IResourceConfiguration">
            <summary>
            Provides a mechanism for loading different types of resources.
            </summary>
        </member>
        <member name="P:Bonsai.Resources.IResourceConfiguration.Name">
            <summary>
            Gets the identifier of the resource.
            </summary>
        </member>
        <member name="P:Bonsai.Resources.IResourceConfiguration.Type">
            <summary>
            Gets the type of the resource.
            </summary>
        </member>
        <member name="M:Bonsai.Resources.IResourceConfiguration.CreateResource(Bonsai.Resources.ResourceManager)">
            <summary>
            Creates the contents of the resource using the specified resource manager.
            </summary>
            <param name="resourceManager">
            The <see cref="T:Bonsai.Resources.ResourceManager"/> object onto which the resource will be loaded.
            The resource manager can be accessed to load additional resource dependencies which
            may be required to create the new resource.
            </param>
            <returns>
            A <see cref="T:System.IDisposable"/> object which can be used to access and release the
            resource contents.
            </returns>
        </member>
        <member name="T:Bonsai.Resources.ResourceConfiguration`1">
            <summary>
            Provides the abstract base class for configuring and loading specific resources.
            </summary>
            <typeparam name="TResource">The type of the resource.</typeparam>
        </member>
        <member name="P:Bonsai.Resources.ResourceConfiguration`1.Name">
            <summary>
            Gets or sets the name of the resource.
            </summary>
        </member>
        <member name="M:Bonsai.Resources.ResourceConfiguration`1.CreateResource(Bonsai.Resources.ResourceManager)">
            <summary>
            When overridden in a derived class, creates a new resource of type
            <typeparamref name="TResource"/>.
            </summary>
            <param name="resourceManager">
            The <see cref="T:Bonsai.Resources.ResourceManager"/> object onto which this resource will be loaded.
            The resource manager can be accessed to load additional resource dependencies which
            may be required to create the new resource.
            </param>
            <returns>A new instance of type <typeparamref name="TResource"/>.</returns>
        </member>
        <member name="M:Bonsai.Resources.ResourceConfiguration`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Resources.ResourceConfiguration`1.OpenResource(System.String)">
            <summary>
            Opens a stream for reading the specified resource.
            </summary>
            <param name="path">The name of the resource to be opened for reading.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object for reading the resource.</returns>
        </member>
        <member name="T:Bonsai.Resources.ResourceConfigurationCollection">
            <summary>
            Represents an immutable collection of resources to be loaded into a resource manager.
            </summary>
        </member>
        <member name="M:Bonsai.Resources.ResourceConfigurationCollection.#ctor(Bonsai.Resources.ResourceManager,System.Collections.Generic.IEnumerable{Bonsai.Resources.IResourceConfiguration})">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Resources.ResourceConfigurationCollection"/> class
            using the specified resource manager and a set of resources to load.
            </summary>
            <param name="resourceManager">The resource manager into which the resources will be loaded.</param>
            <param name="collection">The set of resources to be loaded into the resource manager.</param>
        </member>
        <member name="P:Bonsai.Resources.ResourceConfigurationCollection.ResourceManager">
            <summary>
            Gets the resource manager object into which the resources will be loaded.
            </summary>
        </member>
        <member name="M:Bonsai.Resources.ResourceConfigurationCollection.Add(Bonsai.Resources.IResourceConfiguration)">
            <summary>
            Creates a new collection of resources to be loaded into the resource manager
            by appending a new resource to the end of this collection.
            </summary>
            <param name="resource">
            The additional resource to be loaded into the resource manager.
            </param>
            <returns>
            A new <see cref="T:Bonsai.Resources.ResourceConfigurationCollection"/> object containing the
            combined set of resources.
            </returns>
        </member>
        <member name="M:Bonsai.Resources.ResourceConfigurationCollection.AddRange(System.Collections.Generic.IEnumerable{Bonsai.Resources.IResourceConfiguration})">
            <summary>
            Creates a new collection of resources to be loaded into the resource manager
            by appending a new set of resources to the end of this collection.
            </summary>
            <param name="collection">
            The additional set of resources to be loaded into the resource manager.
            </param>
            <returns>
            A new <see cref="T:Bonsai.Resources.ResourceConfigurationCollection"/> object containing the
            combined set of resources.
            </returns>
        </member>
        <member name="M:Bonsai.Resources.ResourceConfigurationCollection.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Resources.ResourceFileNameConverter">
            <summary>
            Provides a type converter to convert a resource file name to and from other representations.
            </summary>
        </member>
        <member name="M:Bonsai.Resources.ResourceFileNameConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given <paramref name="value"/> object to a resource file name,
            and also sets the <c>Name</c> property of the object that is connected to this type
            converter request, if it exists.
            </summary>
            <inheritdoc/>
        </member>
        <member name="T:Bonsai.Resources.ResourceLoader">
            <summary>
            Provides the abstract base class for operators that load specific resources into the resource manager.
            </summary>
        </member>
        <member name="M:Bonsai.Resources.ResourceLoader.GetResources">
            <summary>
            Returns the set of resources to be loaded into the resource manager.
            </summary>
            <returns>
            A collection of <see cref="T:Bonsai.Resources.IResourceConfiguration"/> objects to be loaded
            into the resource manager.
            </returns>
        </member>
        <member name="M:Bonsai.Resources.ResourceLoader.Process(System.IObservable{Bonsai.Resources.ResourceManager})">
            <summary>
            Bundles a set of resources to be loaded into the resource manager.
            </summary>
            <param name="source">
            A sequence of <see cref="T:Bonsai.Resources.ResourceManager"/> objects into which the resources
            will be loaded.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Resources.ResourceConfigurationCollection"/> objects which
            can be used to load resources into the resource manager.
            </returns>
        </member>
        <member name="M:Bonsai.Resources.ResourceLoader.Process(System.IObservable{Bonsai.Resources.ResourceConfigurationCollection})">
            <summary>
            Appends a new set of resources to be loaded into the resource manager.
            </summary>
            <param name="source">
            A sequence of <see cref="T:Bonsai.Resources.ResourceConfigurationCollection"/> objects with which
            the loader resources will be combined.
            </param>
            <returns>
            A sequence of <see cref="T:Bonsai.Resources.ResourceConfigurationCollection"/> objects which
            can be used to load resources into the resource manager.
            </returns>
        </member>
        <member name="T:Bonsai.Resources.ResourceManager">
            <summary>
            Represents a resource manager that can be used to load and release sets of resources at run time,
            and manage their lifespan. Disposing the resource manager will also dispose of any loaded resources.
            </summary>
        </member>
        <member name="M:Bonsai.Resources.ResourceManager.Load(System.Collections.Generic.IEnumerable{Bonsai.Resources.IResourceConfiguration})">
            <summary>
            Loads a set of resources into the resource manager.
            </summary>
            <param name="source">
            A collection of resources to load into the resource manager.
            </param>
            <returns>
            A <see cref="T:System.IDisposable"/> object which can be used to unload the
            loaded resources.
            </returns>
        </member>
        <member name="M:Bonsai.Resources.ResourceManager.Load``1(System.String)">
            <summary>
            Loads the resource with the specified name into the resource manager.
            </summary>
            <typeparam name="TResource">The type of the loaded resource.</typeparam>
            <param name="name">The name of the resource to load.</param>
            <returns>
            The loaded resource. Repeated calls to load the same resource will return
            the same object instance.
            </returns>
        </member>
        <member name="M:Bonsai.Resources.ResourceManager.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Bonsai.Resources.ResourceManager"/> class.
            </summary>
        </member>
        <member name="T:Bonsai.Resources.ResourceNameConverter">
            <summary>
            Provides a type converter to convert a resource name to and from other representations.
            It also provides a mechanism to find existing resources declared in the workflow.
            </summary>
        </member>
        <member name="M:Bonsai.Resources.ResourceNameConverter.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Bonsai.Resources.ResourceNameConverter"/> class
            for the specified type.
            </summary>
            <param name="type">The type of resources supported by this converter.</param>
        </member>
        <member name="M:Bonsai.Resources.ResourceNameConverter.IsResourceSupported(Bonsai.Resources.IResourceConfiguration)">
            <summary>
            Returns a value indicating whether the specified resource is supported
            by this converter.
            </summary>
            <param name="resource">The resource to be tested.</param>
            <returns>
            <see langword="true"/> if the specified resource is supported;
            <see langword="false"/> otherwise.
            </returns>
        </member>
        <member name="M:Bonsai.Resources.ResourceNameConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:Bonsai.Resources.ResourceNameConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of resource names which are available in the call context
            of this type converter request.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"/> containing the set of
            available resources. Only resources for which <see cref="M:Bonsai.Resources.ResourceNameConverter.IsResourceSupported(Bonsai.Resources.IResourceConfiguration)"/>
            returns <see langword="true"/> will be included.
            </returns>
            <inheritdoc/>
        </member>
    </members>
</doc>
